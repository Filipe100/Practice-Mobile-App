{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { infoMessage } from \"../utils/flashMessage\";\nimport NetInfo from '@react-native-community/netinfo';\nimport Settings from \"../constants/Settings\";\nimport { RoiDeletePerson, RoiGetPeople } from \"../utils/RoiApi\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2, Text } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { ButtonContainer } from \"../components/ButtonContainer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(refreshPersonList, []);\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function deletePerson(person) {\n    PopupOkCancel('Delete person?', `Are you sure you want to delete ${person.name}`, function () {\n      RoiDeletePerson(person.id).then(function (data) {\n        PopupOk('Person deleted', `${person.name} has been  deleted`);\n        refreshPersonList();\n      }).catch(function (error) {\n        PopupOk('API Error', 'Could not delete person');\n      });\n    }, function () {\n      console.log('Cancel - no delete for you!');\n    });\n  }\n  function displayConnectionMessage() {\n    console.log('displayConnectionMessage');\n    NetInfo.fetch().then(function (status) {\n      if (!status.isConnected) {\n        infoMessage('No internet connection', 'You will only see cached data until you \\nhave an active internet connection again');\n      }\n    });\n  }\n  function displayPeople() {\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n      return _jsxs(View, {\n        style: Styles.dataContainerHorizontal,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            children: p.name\n          }), _jsx(TextParagraph, {\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : '---'\n          }), _jsx(TextParagraph, {\n            children: p.phone\n          })]\n        }), _jsxs(ButtonContainer, {\n          direction: \"column\",\n          children: [_jsx(MyButton, {\n            text: \"Info\",\n            type: \"major\",\n            size: \"small\",\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtomText\n          }), _jsx(MyButton, {\n            text: \"Edit\",\n            type: \"default\",\n            size: \"small\",\n            buttonStyle: Styles.personItemListButton,\n            textStyle: Styles.personListItemButtomText\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtomText\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","SafeAreaView","infoMessage","NetInfo","Settings","RoiDeletePerson","RoiGetPeople","PopupOk","PopupOkCancel","TextParagraph","TextH1","TextH2","Text","Styles","MyButton","ButtonContainer","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","error","deletePerson","person","name","id","displayConnectionMessage","fetch","status","isConnected","displayPeople","map","p","_p$department$name","_p$department","style","dataContainerHorizontal","children","personListItemDetails","department","phone","direction","text","type","size","buttonStyle","personListItemButton","textStyle","personListItemButtomText","personItemListButton","safeAreaView","personButtonContainer","onPress","showAddPerson","container","contentContainerStyle","contentContainer","marginTop"],"sources":["C:/project/Practice-Mobile-Apps/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { infoMessage} from '../utils/flashMessage';\nimport NetInfo from '@react-native-community/netinfo';\n\n// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiDeletePerson, RoiGetPeople } from '../utils/RoiApi';\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1, TextH2, Text} from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\nimport { ButtonContainer } from '../components/ButtonContainer';\n\nexport default function ViewPeopleScreen(props) {\n\n  // State - data for this component\n\n  // Data array, default to empty array\n  const [people, setPeople] = React.useState([])\n\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  React.useEffect(refreshPersonList, [])\n\n  // Refresh the person list data - call the API\n  function refreshPersonList() {\n\n    console.log(\"refresh person list\")\n\n    // Get data from the API\n    RoiGetPeople()\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setPeople(data)\n      })\n      // Error\n      .catch(error => {\n        PopupOk(\"API Error\", \"Could not get people from the server\")\n      })\n\n  }\n\n\n\n  /**\n   * Delete a person from the database\n   * @param {Person} person The person to delete.\n   */\n  function deletePerson(person) {\n    // Check if person should be deleted (confirm with user)\n    PopupOkCancel(\n      // Title and message\n      'Delete person?',\n      `Are you sure you want to delete ${person.name}`,\n\n      // 0K - delete the person\n      () => {\n        // Delete the person using the API\n        RoiDeletePerson(person.id)\n          .then((data) => {\n            // Show confirmation that the person has been deleted\n            PopupOk('Person deleted', `${person.name} has been  deleted`);\n            // Refresh the person list\n            refreshPersonList();\n          })\n          .catch((error) => {\n            // Display error\n            PopupOk('API Error', 'Could not delete person');\n          });\n        // console.log('Ok.. deleting person');\n      },\n      // Cancel do nothing\n      () => {\n        console.log('Cancel - no delete for you!');\n      }\n    );\n  }\n\n  // Display flash message banner if offline\n  function displayConnectionMessage() {\n    console.log('displayConnectionMessage');\n    // Get network connection status\n    NetInfo.fetch().then((status) => {\n      // Check if not connected to the Internet\n      if (!status.isConnected) {\n        // Display the flash message\n        infoMessage('No internet connection', 'You will only see cached data until you \\nhave an active internet connection again');\n      }\n    });\n  }\n\n  // Display all people data\n  function displayPeople() {\n    \n    // Loop through each item and turn into appropriate output and then return the result\n    return people.map(p => {\n\n      // Create an output view for each item\n      return (\n        <View key={p.id} style={Styles.dataContainerHorizontal}>\n          <View style={Styles.personListItemDetails}>\n          <TextParagraph>{p.name}</TextParagraph>\n          <TextParagraph>{p.department?.name ?? '---'}</TextParagraph>\n          <TextParagraph>{p.phone}</TextParagraph>\n          </View>\n          <ButtonContainer direction=\"column\">\n            <MyButton \n            text=\"Info\"\n            type=\"major\"\n            size=\"small\"\n            buttonStyle={Styles.personListItemButton}\n            textStyle={Styles.personListItemButtomText}\n            />\n            <MyButton          \n            text=\"Edit\"\n            type=\"default\"\n            size=\"small\" \n            buttonStyle={Styles.personItemListButton}\n            textStyle={Styles.personListItemButtomText}\n            />\n            <MyButton          \n            text=\"Delete\"\n            type=\"minor\"\n            size=\"small\" \n            buttonStyle={Styles.personListItemButton}\n            textStyle={Styles.personListItemButtomText}\n            />\n          </ButtonContainer>\n        </View>\n      )\n\n    })\n    \n  }\n\n\n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n      \n      <View style={Styles.personButtonContainer}>\n        <MyButton \n          text=\"+ Add new person\"\n          type=\"major\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton \n          text=\"Refresh\"\n          type=\"default\"    // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={refreshPersonList}\n        />\n      </View>\n      \n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\n          \n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\n\n        <View>\n          {displayPeople()}\n        </View>\n\n      </ScrollView>\n    </SafeAreaView>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}