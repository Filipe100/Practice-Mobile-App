{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport NetInfo from '@react-native-community/netinfo';\nimport cache from \"./Caching\";\nvar apiUrl = 'http://localhost:5118/api';\ncache.ttlMinutes = 60;\nexport function getRequest(_x) {\n  return _getRequest.apply(this, arguments);\n}\nfunction _getRequest() {\n  _getRequest = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    url += '?' + new URLSearchParams(data);\n    var response = yield fetch(url, {\n      method: 'GET',\n      cache: 'no-cache',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _getRequest.apply(this, arguments);\n}\nexport function getRequestWithCaching(_x2) {\n  return _getRequestWithCaching.apply(this, arguments);\n}\nfunction _getRequestWithCaching() {\n  _getRequestWithCaching = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var cacheKey = url;\n    var networkState = yield NetInfo.fetch();\n    if (!networkState.isConnected) {\n      console.log(`OFFLINE: Load from cache: ${cacheKey}`);\n      return Promise.resolve(yield cache.getItem(cacheKey));\n    }\n    url += '?' + new URLSearchParams(data);\n    var response = yield fetch(url, {\n      method: 'GET',\n      cache: 'no-cache',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    console.log(`Updating cache: ${cacheKey}`);\n    cache.setItem(cacheKey, yield response.clone().json());\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _getRequestWithCaching.apply(this, arguments);\n}\nexport function postRequest(_x3) {\n  return _postRequest.apply(this, arguments);\n}\nfunction _postRequest() {\n  _postRequest = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var response = yield fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      cache: 'no-cache',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _postRequest.apply(this, arguments);\n}\nexport function putRequest(_x4) {\n  return _putRequest.apply(this, arguments);\n}\nfunction _putRequest() {\n  _putRequest = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var response = yield fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      cache: 'no-cache',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _putRequest.apply(this, arguments);\n}\nexport function deleteRequest(_x5) {\n  return _deleteRequest.apply(this, arguments);\n}\nfunction _deleteRequest() {\n  _deleteRequest = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var response = yield fetch(url, {\n      method: 'DELETE',\n      body: JSON.stringify(data),\n      cache: 'no-cache',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _deleteRequest.apply(this, arguments);\n}\nexport function handleFetchError(_x6) {\n  return _handleFetchError.apply(this, arguments);\n}\nfunction _handleFetchError() {\n  _handleFetchError = _asyncToGenerator(function* (response) {\n    if (!response.ok) {\n      if (response.message) {\n        throw Error(`API ${response.status} error: ${response.message}`);\n      } else {\n        throw Error(`API ${response.status} error: ${response.statusText}`);\n      }\n    }\n    return response;\n  });\n  return _handleFetchError.apply(this, arguments);\n}\nexport function RoiGetDepartments() {\n  console.log(`${apiUrl}/Departments`);\n  return getRequest(`${apiUrl}/Departments`).then(function (response) {\n    return response;\n  });\n}\nexport function RoiGetPeople() {\n  return getRequest(`${apiUrl}/People`).then(function (response) {\n    return response;\n  });\n}\nexport function RoiGetPerson(id) {\n  console.log(id);\n  console.log(`${apiUrl}/People/${id}`);\n  return getRequest(`${apiUrl}/People/${id}`).then(function (response) {\n    return response;\n  });\n}\nexport function RoiDeletePerson(id) {\n  return deleteRequest(`${apiUrl}/People/${id}`, {\n    id: id\n  }).then(function (response) {\n    return true;\n  });\n}\nexport function RoiAddPerson(name, phone, departmentId, street, city, state, zip, country) {\n  return postRequest(`${apiUrl}/People`, {\n    name: name,\n    phone: phone,\n    departmentId: departmentId,\n    street: street,\n    city: city,\n    state: state,\n    zip: zip,\n    country: country\n  }).then(function (response) {\n    return response;\n  });\n}\nexport function RoiUpdatePerson(id, name, phone, departmentId, street, city, state, zip, country) {\n  return putRequest(`${apiUrl}/People/${id}`, {\n    id: id,\n    name: name,\n    phone: phone,\n    departmentId: departmentId,\n    street: street,\n    city: city,\n    state: state,\n    zip: zip,\n    country: country\n  }).then(function (response) {\n    return true;\n  });\n}","map":{"version":3,"names":["NetInfo","cache","apiUrl","ttlMinutes","getRequest","_x","_getRequest","apply","arguments","_asyncToGenerator","url","data","length","undefined","returnsData","URLSearchParams","response","fetch","method","headers","Accept","then","handleFetchError","json","Promise","resolve","getRequestWithCaching","_x2","_getRequestWithCaching","cacheKey","networkState","isConnected","console","log","getItem","setItem","clone","postRequest","_x3","_postRequest","body","JSON","stringify","putRequest","_x4","_putRequest","deleteRequest","_x5","_deleteRequest","_x6","_handleFetchError","ok","message","Error","status","statusText","RoiGetDepartments","RoiGetPeople","RoiGetPerson","id","RoiDeletePerson","RoiAddPerson","name","phone","departmentId","street","city","state","zip","country","RoiUpdatePerson"],"sources":["C:/Users/Filipe/Desktop/React Native App/Mobile App/Practice-Mobile-App/utils/Api.js"],"sourcesContent":["import NetInfo from '@react-native-community/netinfo';\r\nimport cache from './Caching';\r\n\r\n// Root URL for the API backend\r\n// const apiUrl = \"https://localhost:7215/api/v1\";\r\nconst apiUrl = 'http://localhost:5118/api';\r\n// 5219 5299 http://localhost\r\n// Use caching for semi-offline operation - set high TTL (time to live)\r\ncache.ttlMinutes = 60;\r\n\r\n/**\r\n * Create a GET request to a URL.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nexport async function getRequest(url, data = {}, returnsData = true) {\r\n  // Build URL with data attached\r\n  url += '?' + new URLSearchParams(data);\r\n\r\n  // Make request, wait for response\r\n  const response = await fetch(url, {\r\n    method: 'GET',\r\n    cache: 'no-cache', // Ignore caching\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n    },\r\n  })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError);\r\n\r\n  // Return response data if available\r\n  return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n/**\r\n * Create a GET request to a URL while using the AsyncCache for offline data loading.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nexport async function getRequestWithCaching(url, data = {}, returnsData = true) {\r\n  // Use the original URL as the cache key\r\n  const cacheKey = url;\r\n\r\n  // Get network state\r\n  const networkState = await NetInfo.fetch();\r\n\r\n  // Check if currently offline\r\n  if (!networkState.isConnected) {\r\n    // Load from cache if available (null if not)\r\n    console.log(`OFFLINE: Load from cache: ${cacheKey}`);\r\n    return Promise.resolve(await cache.getItem(cacheKey));\r\n  }\r\n\r\n  // Build URL with data attached\r\n  url += '?' + new URLSearchParams(data);\r\n\r\n  // Make request, wait for response\r\n  const response = await fetch(url, {\r\n    method: 'GET',\r\n    cache: 'no-cache', // Ignore caching\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n    },\r\n  })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError);\r\n\r\n  // Update cache\r\n  console.log(`Updating cache: ${cacheKey}`);\r\n  cache.setItem(cacheKey, await response.clone().json());\r\n\r\n  // Return response data if available\r\n  return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n/**\r\n * Create a POST request to a URL.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nexport async function postRequest(url, data = {}, returnsData = true) {\r\n  // Make request, wait for response\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n    cache: 'no-cache', // Ignore caching\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n    },\r\n  })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError);\r\n\r\n  // Return response data if available\r\n  return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n/**\r\n * Create a PUT request to a URL.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nexport async function putRequest(url, data = {}, returnsData = false) {\r\n  // Make request, wait for response\r\n  const response = await fetch(url, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(data),\r\n    cache: 'no-cache', // Ignore caching\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n    },\r\n  })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError);\r\n\r\n  // Return response data if available\r\n  return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n/**\r\n * Create a DELETE request to a URL.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nexport async function deleteRequest(url, data = {}, returnsData = false) {\r\n  // Make request, wait for response\r\n  const response = await fetch(url, {\r\n    method: 'DELETE',\r\n    body: JSON.stringify(data),\r\n    cache: 'no-cache', // Ignore caching\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n    },\r\n  })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError);\r\n\r\n  // Return response data if available\r\n  return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n/**\r\n * Check for 400-500 errors and custom messages from the server.\r\n * @param {Response} response The Fetch API Response object.\r\n * @returns {Response} The original Response object.\r\n */\r\nexport async function handleFetchError(response) {\r\n  // Check for errors, e.g. 400, 500\r\n  if (!response.ok) {\r\n    // Check for custom error message from API\r\n    if (response.message) {\r\n      throw Error(`API ${response.status} error: ${response.message}`);\r\n    } else {\r\n      throw Error(`API ${response.status} error: ${response.statusText}`);\r\n    }\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\n/*\r\n * ADD YOUR API CALLING METHODS HERE\r\n */\r\n\r\n// Get all departments\r\nexport function RoiGetDepartments() {\r\n  // Call API endpoint: GET /Departments\r\n  console.log(`${apiUrl}/Departments`);\r\n  return getRequest(`${apiUrl}/Departments`).then((response) => {\r\n    // If request/response is successful, return JSON data\r\n    return response;\r\n  });\r\n}\r\n\r\n// Get all people\r\nexport function RoiGetPeople() {\r\n  // Call API endpoint: GET /People\r\n  return getRequest(`${apiUrl}/People`).then((response) => {\r\n    // If request/response is successful, return JSON data\r\n    return response;\r\n  });\r\n}\r\n\r\n// Get person\r\nexport function RoiGetPerson(id) {\r\n  // Call API endpoint: GET /Person/{id}\r\n  console.log(id);\r\n  console.log(`${apiUrl}/People/${id}`);\r\n  return getRequest(`${apiUrl}/People/${id}`).then((response) => {\r\n    // If request/response is successful, return JSON data\r\n    return response;\r\n  });\r\n}\r\n\r\n// Delete person\r\nexport function RoiDeletePerson(id) {\r\n  // Call API endpoint: DELETE /Person/{id}\r\n  return deleteRequest(`${apiUrl}/People/${id}`, { id }).then((response) => {\r\n    // If request/response is successful, return true (no data in response)\r\n    return true;\r\n  });\r\n}\r\n\r\n// Add person\r\nexport function RoiAddPerson(name, phone, departmentId, street, city, state, zip, country) {\r\n  // Call API endpoint: POST /Person\r\n  return postRequest(`${apiUrl}/People`, { name, phone, departmentId, street, city, state, zip, country }).then((response) => {\r\n    // If request/response is successful, return JSON data\r\n    return response;\r\n  });\r\n}\r\n\r\n// Update person\r\nexport function RoiUpdatePerson(id, name, phone, departmentId, street, city, state, zip, country) {\r\n  // Call API endpoint: PUT /Person/{id}\r\n  return putRequest(`${apiUrl}/People/${id}`, { id, name, phone, departmentId, street, city, state, zip, country }).then((response) => {\r\n    // If request/response is successful, return true (no data in response)\r\n    return true;\r\n  });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}