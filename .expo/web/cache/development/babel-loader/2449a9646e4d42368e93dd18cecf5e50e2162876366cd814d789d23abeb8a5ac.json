{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport RNCNetInfo from \"./nativeModule\";\nimport { DEVICE_CONNECTIVITY_EVENT } from \"./privateTypes\";\nvar nativeEventEmitter = new NativeEventEmitter();\nRNCNetInfo.addListener(DEVICE_CONNECTIVITY_EVENT, function (event) {\n  nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);\n});\nexport default _objectSpread(_objectSpread({}, RNCNetInfo), {}, {\n  eventEmitter: nativeEventEmitter\n});","map":{"version":3,"names":["RNCNetInfo","DEVICE_CONNECTIVITY_EVENT","nativeEventEmitter","NativeEventEmitter","addListener","event","emit","_objectSpread","eventEmitter"],"sources":["C:\\project\\Practice-Mobile-Apps\\node_modules\\@react-native-community\\netinfo\\lib\\module\\internal\\nativeInterface.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\nimport {DEVICE_CONNECTIVITY_EVENT} from './privateTypes';\n\nconst nativeEventEmitter = new NativeEventEmitter();\n\n// Listen to connectivity events\nRNCNetInfo.addListener(\n  DEVICE_CONNECTIVITY_EVENT,\n  (event): void => {\n    nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);\n  },\n);\n\nexport default {\n  ...RNCNetInfo,\n  eventEmitter: nativeEventEmitter,\n};\n"],"mappings":";;;;AAUA,OAAOA,UAAP;AACA,SAAQC,yBAAR;AAEA,IAAMC,kBAAkB,GAAG,IAAIC,kBAAJ,EAA3B;AAGAH,UAAU,CAACI,WAAX,CACEH,yBADF,EAEG,UAAAI,KAAD,EAAiB;EACfH,kBAAkB,CAACI,IAAnB,CAAwBL,yBAAxB,EAAmDI,KAAnD;AACD,CAJH;AAOA,eAAAE,aAAA,CAAAA,aAAA,KACKP,UADU;EAEbQ,YAAY,EAAEN;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}