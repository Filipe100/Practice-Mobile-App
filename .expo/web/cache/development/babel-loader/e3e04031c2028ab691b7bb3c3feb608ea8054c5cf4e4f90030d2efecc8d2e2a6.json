{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport cache from \"./Caching\";\nvar apiUrl = \"https://localhost:7215/api/v1\";\ncache.ttlMinutes = 60;\nfunction getRequest(_x) {\n  return _getRequest.apply(this, arguments);\n}\nfunction _getRequest() {\n  _getRequest = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    url += '?' + new URLSearchParams(data);\n    var response = yield fetch(url, {\n      method: 'GET',\n      cache: 'no-cache',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _getRequest.apply(this, arguments);\n}\nfunction getRequestWithCaching(_x2) {\n  return _getRequestWithCaching.apply(this, arguments);\n}\nfunction _getRequestWithCaching() {\n  _getRequestWithCaching = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var cacheKey = url;\n    var networkState = yield NetInfo.fetch();\n    if (!networkState.isConnected) {\n      console.log(`OFFLINE: Load from cache: ${cacheKey}`);\n      return Promise.resolve(yield cache.getItem(cacheKey));\n    }\n    url += '?' + new URLSearchParams(data);\n    var response = yield fetch(url, {\n      method: 'GET',\n      cache: 'no-cache',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    console.log(`Updating cache: ${cacheKey}`);\n    cache.setItem(cacheKey, yield response.clone().json());\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _getRequestWithCaching.apply(this, arguments);\n}\nfunction postRequest(_x3) {\n  return _postRequest.apply(this, arguments);\n}\nfunction _postRequest() {\n  _postRequest = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var response = yield fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      cache: 'no-cache',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _postRequest.apply(this, arguments);\n}\nfunction putRequest(_x4) {\n  return _putRequest.apply(this, arguments);\n}\nfunction _putRequest() {\n  _putRequest = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var response = yield fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      cache: 'no-cache',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _putRequest.apply(this, arguments);\n}\nfunction deleteRequest(_x5) {\n  return _deleteRequest.apply(this, arguments);\n}\nfunction _deleteRequest() {\n  _deleteRequest = _asyncToGenerator(function* (url) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var returnsData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var response = yield fetch(url, {\n      method: 'DELETE',\n      body: JSON.stringify(data),\n      cache: 'no-cache',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    }).then(handleFetchError);\n    return returnsData ? response.json() : Promise.resolve();\n  });\n  return _deleteRequest.apply(this, arguments);\n}\nfunction handleFetchError(_x6) {\n  return _handleFetchError.apply(this, arguments);\n}\nfunction _handleFetchError() {\n  _handleFetchError = _asyncToGenerator(function* (response) {\n    if (!response.ok) {\n      if (response.message) {\n        throw Error(`API ${response.status} error: ${response.message}`);\n      } else {\n        throw Error(`API ${response.status} error: ${response.statusText}`);\n      }\n    }\n    return response;\n  });\n  return _handleFetchError.apply(this, arguments);\n}\nexport function RoiGetPeople() {\n  return getRequest(`${apiUrl}/People`).then(function (response) {\n    return response;\n  });\n}","map":{"version":3,"names":["NetInfo","cache","apiUrl","ttlMinutes","getRequest","_x","_getRequest","apply","arguments","_asyncToGenerator","url","data","length","undefined","returnsData","URLSearchParams","response","fetch","method","headers","then","handleFetchError","json","Promise","resolve","getRequestWithCaching","_x2","_getRequestWithCaching","cacheKey","networkState","isConnected","console","log","getItem","setItem","clone","postRequest","_x3","_postRequest","body","JSON","stringify","putRequest","_x4","_putRequest","deleteRequest","_x5","_deleteRequest","_x6","_handleFetchError","ok","message","Error","status","statusText","RoiGetPeople"],"sources":["C:/project/Practice-Mobile-Apps/utils/Api.js"],"sourcesContent":["import NetInfo from \"@react-native-community/netinfo\";\r\nimport cache from \"./Caching\";\r\n\r\n// Root URL for the API backend\r\nconst apiUrl = \"https://localhost:7215/api/v1\";\r\n\r\n// Use caching for semi-offline operation - set high TTL (time to live)\r\ncache.ttlMinutes = 60;\r\n\r\n\r\n/**\r\n * Create a GET request to a URL.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nasync function getRequest(url, data = {}, returnsData = true) {\r\n    \r\n    // Build URL with data attached\r\n    url += '?' + new URLSearchParams(data);\r\n    \r\n    // Make request, wait for response\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        cache: 'no-cache', // Ignore caching\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n    })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError)\r\n\r\n    // Return response data if available\r\n    return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n\r\n/**\r\n * Create a GET request to a URL while using the AsyncCache for offline data loading.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nasync function getRequestWithCaching(url, data = {}, returnsData = true) {\r\n    \r\n    // Use the original URL as the cache key\r\n    const cacheKey = url\r\n\r\n    // Get network state\r\n    const networkState = await NetInfo.fetch()\r\n\r\n    // Check if currently offline\r\n    if (!networkState.isConnected) {\r\n\r\n        // Load from cache if available (null if not)\r\n        console.log(`OFFLINE: Load from cache: ${cacheKey}`)\r\n        return Promise.resolve(await cache.getItem(cacheKey))\r\n    }\r\n    \r\n    // Build URL with data attached\r\n    url += '?' + new URLSearchParams(data);\r\n    \r\n    // Make request, wait for response\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        cache: 'no-cache', // Ignore caching\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n    })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError)\r\n\r\n    // Update cache\r\n    console.log(`Updating cache: ${cacheKey}`)\r\n    cache.setItem(cacheKey, await response.clone().json())\r\n\r\n    // Return response data if available\r\n    return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n\r\n/**\r\n * Create a POST request to a URL.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nasync function postRequest(url, data = {}, returnsData = true) {\r\n    \r\n    // Make request, wait for response\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data),\r\n        cache: 'no-cache', // Ignore caching\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n    })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError);\r\n\r\n    // Return response data if available\r\n    return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n\r\n/**\r\n * Create a PUT request to a URL.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nasync function putRequest(url, data = {}, returnsData = false) {\r\n    \r\n    // Make request, wait for response\r\n    const response = await fetch(url, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(data),\r\n        cache: 'no-cache', // Ignore caching\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n    })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError);\r\n\r\n    // Return response data if available\r\n    return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n\r\n/**\r\n * Create a DELETE request to a URL.\r\n * @param {string} url The request URL.\r\n * @param {object} data The data to pass through.\r\n * @param {bool} returnsData True if the response should return data.\r\n * @returns {Promise} The response promise.\r\n */\r\nasync function deleteRequest(url, data = {}, returnsData = false) {\r\n    \r\n    // Make request, wait for response\r\n    const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        body: JSON.stringify(data),\r\n        cache: 'no-cache', // Ignore caching\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n    })\r\n    // Check for errors, e.g. 400, 500\r\n    .then(handleFetchError);\r\n\r\n    // Return response data if available\r\n    return returnsData ? response.json() : Promise.resolve();\r\n}\r\n\r\n\r\n/**\r\n * Check for 400-500 errors and custom messages from the server.\r\n * @param {Response} response The Fetch API Response object.\r\n * @returns {Response} The original Response object.\r\n */\r\nasync function handleFetchError(response) {\r\n\r\n    // Check for errors, e.g. 400, 500\r\n    if (!response.ok) {\r\n\r\n        // Check for custom error message from API\r\n        if (response.message) {\r\n            throw Error(`API ${response.status} error: ${response.message}`);\r\n        } else {\r\n            throw Error(`API ${response.status} error: ${response.statusText}`);\r\n        }\r\n    }\r\n\r\n    return response;\r\n}\r\n\r\n\r\n/*\r\n * ADD YOUR API CALLING METHODS HERE\r\n */\r\n\r\n\r\n// Get all people\r\nexport function RoiGetPeople() {\r\n\r\n    // Call API endpoint: GET /People\r\n    return getRequest(`${apiUrl}/People`)\r\n        .then(response => {\r\n            // If request/response is successful, return JSON data\r\n            return response\r\n        })\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}